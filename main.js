/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => HiddenGrotto
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "default",
  primaryType: "primary-type-normal",
  secondaryType: "secondary-type-steel",
  presetOverride: "",
  fontWeight: 400,
  fontWidth: 100,
  tagInteraction: true,
  tableStyle: false,
  mobileStatusbar: false,
  mobileToolbarheight: 2,
  blockquoteBorder: false,
  calloutBackground: false,
  embedHeight: 4e3,
  embedTitle: true
};
var pokemonTypes = ["normal", "fighting", "flying", "poison", "ground", "rock", "bug", "ghost", "steel", "fire", "water", "grass", "electric", "psychic", "ice", "dragon", "dark", "fairy"];
var primaryTypes = pokemonTypes.map((type) => `primary-type-${type}`);
var secondaryTypes = pokemonTypes.map((type) => `secondary-type-${type}`);
var TypeSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, onChoose) {
    super(app);
    this.onChoose = onChoose;
    this.setPlaceholder("Search Pok\xE9mon types...");
  }
  getSuggestions(query) {
    return pokemonTypes.filter(
      (type) => type.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(type, el) {
    el.createEl("div", { text: type.charAt(0).toUpperCase() + type.slice(1) });
  }
  onChooseSuggestion(type, evt) {
    this.onChoose(type);
  }
  onOpen() {
    super.onOpen();
    this.containerEl.classList.add("hidden-grotto-types");
  }
};
var PresetSuggestModal = class extends import_obsidian.SuggestModal {
  constructor(app, presets, onChoose) {
    super(app);
    this.onChoose = onChoose;
    this.presets = presets;
    this.setPlaceholder("Search available presets...");
  }
  getSuggestions(query) {
    return this.presets.filter(
      (preset) => preset.toLowerCase().includes(query.toLowerCase())
    );
  }
  renderSuggestion(preset, el) {
    el.createEl("div", { text: preset.charAt(0).toUpperCase() + preset.slice(1) });
  }
  onChooseSuggestion(preset, evt) {
    this.onChoose(preset);
  }
  onOpen() {
    super.onOpen();
    this.containerEl.classList.add("hidden-grotto-presets");
  }
};
var HiddenGrotto = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.cachedPresets = null;
  }
  async onload() {
    await this.loadSettings();
    this.applySettingsToDOM();
    (0, import_obsidian.addIcon)("cycle-primary-type", '<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 26 26" version="1.1"><g id="surface1"><path style=" stroke:currentColor;fill-rule:evenodd;fill:none;fill-opacity:1;" d="M 13.15625 11.949219 C 13.320312 11.847656 13.457031 11.640625 13.570312 11.410156 C 15.035156 12.007812 16.0625 13.421875 16.0625 15.070312 C 16.0625 17.261719 14.246094 19.039062 12.007812 19.039062 C 11.085938 19.039062 10.238281 18.742188 9.558594 18.234375 C 9.335938 18.128906 9.152344 18.027344 9 17.945312 C 8.769531 17.816406 8.613281 17.734375 8.519531 17.746094 C 8.238281 17.785156 8.320312 18.042969 8.394531 18.277344 C 8.445312 18.433594 8.492188 18.582031 8.417969 18.644531 C 8.34375 18.707031 8.097656 18.472656 7.8125 18.199219 C 7.421875 17.828125 6.957031 17.382812 6.734375 17.519531 C 6.5625 17.625 6.730469 17.910156 6.9375 18.261719 L 6.953125 18.285156 C 7.039062 18.433594 7.140625 18.585938 7.234375 18.722656 C 7.421875 19.003906 7.574219 19.230469 7.496094 19.265625 C 7.40625 19.3125 6.769531 18.882812 6.230469 18.285156 C 6.023438 18.054688 5.824219 17.808594 5.636719 17.574219 C 5.230469 17.066406 4.890625 16.644531 4.699219 16.695312 C 4.46875 16.753906 4.644531 17.226562 4.898438 17.683594 C 5.015625 17.898438 5.15625 18.113281 5.277344 18.300781 C 5.46875 18.59375 5.613281 18.816406 5.558594 18.84375 C 5.488281 18.878906 4.871094 18.277344 4.453125 17.519531 C 4.203125 17.066406 3.992188 16.570312 3.824219 16.164062 C 3.640625 15.726562 3.503906 15.402344 3.414062 15.367188 C 3.101562 15.253906 3.101562 15.894531 3.226562 16.816406 C 3.242188 16.933594 3.265625 17.0625 3.296875 17.191406 C 4.515625 21.128906 8.257812 24 12.683594 24 C 18.097656 24 22.488281 19.707031 22.488281 14.410156 C 22.488281 9.371094 18.511719 5.238281 13.457031 4.851562 C 13.464844 4.613281 13.589844 4.144531 13.589844 4.144531 C 13.589844 4.144531 14.480469 1.984375 14.527344 1.523438 C 14.53125 1.492188 14.535156 1.460938 14.539062 1.425781 C 14.59375 0.925781 14.699219 0 13.902344 0 C 13.476562 0 13.277344 0.316406 13.050781 0.679688 C 12.964844 0.816406 12.871094 0.964844 12.761719 1.101562 C 11.972656 2.089844 10.644531 3.320312 9.890625 3.976562 C 8.296875 5.367188 6.730469 6.507812 5.820312 7.171875 C 5.40625 7.476562 5.125 7.679688 5.039062 7.765625 C 4.386719 8.402344 2.046875 12.621094 2.046875 12.621094 C 2.046875 12.621094 1.289062 13.976562 1.558594 14.253906 C 1.828125 14.527344 2.476562 14.464844 2.476562 14.464844 C 2.476562 14.464844 11.191406 12.464844 11.972656 12.304688 C 12.183594 12.265625 12.332031 12.238281 12.445312 12.222656 C 12.753906 12.167969 12.808594 12.160156 13.15625 11.949219 Z M 6.996094 9.378906 C 6.527344 9.824219 5.75 10.882812 5.75 10.882812 C 5.75 10.882812 7.195312 10.972656 7.988281 10.21875 C 8.78125 9.464844 8.601562 8.175781 8.601562 8.175781 C 8.601562 8.175781 7.464844 8.933594 6.996094 9.378906 Z M 6.996094 9.378906 "/></g></svg>');
    (0, import_obsidian.addIcon)("cycle-secondary-type", '<?xml version="1.0" encoding="UTF-8"?><svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 26 26" version="1.1"><g id="surface1"><path style=" stroke:currentColor;fill-rule:evenodd;fill:none;fill-opacity:1;" d="M 8.378906 22.394531 C 11.894531 22.394531 14.902344 20.441406 16.144531 17.667969 C 16.160156 17.636719 11.15625 18.96875 11.316406 18.5 C 11.386719 18.289062 14.453125 17.167969 16.691406 15.859375 C 17.972656 15.109375 18.566406 13.519531 18.566406 13.519531 C 18.566406 13.519531 16.402344 14.570312 15.308594 14.835938 C 13.101562 15.375 11.164062 15.316406 11.164062 15.257812 C 11.164062 15.136719 14.386719 14.527344 18.863281 11.796875 C 20.96875 10.511719 21.542969 8.300781 21.542969 8.300781 C 21.542969 8.300781 19.226562 9.679688 17.828125 10.136719 C 14.503906 11.21875 11.476562 11.542969 11.476562 11.394531 C 11.476562 11.082031 14.140625 10.351562 16.96875 8.980469 C 18.441406 8.269531 19.710938 7.335938 21.1875 6.300781 C 23.601562 4.609375 24 1.59375 24 1.59375 C 24 1.59375 21.617188 3.128906 20.457031 3.640625 C 15.664062 5.742188 11.429688 6.847656 8.378906 7.085938 C 3.769531 7.445312 0 10.660156 0 14.835938 C 0 19.011719 3.75 22.394531 8.378906 22.394531 Z M 8.378906 22.394531 "/></g></svg>');
    this.addRibbonIcon("cycle-primary-type", "Cycle primary type", async () => {
      await this.cycleType("primary");
    });
    this.addRibbonIcon("cycle-secondary-type", "Cycle decondary type", async () => {
      await this.cycleType("secondary");
    });
    this.addCommand({
      id: "cycle-primary-type",
      name: "Cycle primary type",
      icon: "cycle-primary-type",
      callback: async () => await this.cycleType("primary")
    });
    this.addCommand({
      id: "cycle-secondary-type",
      name: "Cycle secondary type",
      icon: "cycle-secondary-type",
      callback: async () => await this.cycleType("secondary")
    });
    this.addSettingTab(new PokeSettingsTab(this.app, this));
  }
  removeTypeClasses() {
    Array.from(document.body.classList).forEach((cls) => {
      if (cls.startsWith("primary-type-") || cls.startsWith("secondary-type-") || cls.startsWith("preset-")) {
        document.body.classList.remove(cls);
      }
    });
  }
  removeTypeClassesByCategory(typeCategory) {
    Array.from(document.body.classList).forEach((cls) => {
      if (cls.startsWith(`${typeCategory}-type-`)) {
        document.body.classList.remove(cls);
      }
    });
  }
  // Cycle through the types in order
  async cycleType(typeCategory) {
    const types = typeCategory === "primary" ? primaryTypes : secondaryTypes;
    const key = `${typeCategory}Type`;
    const currentType = this.settings[key];
    const currentIndex = types.indexOf(currentType);
    const nextIndex = (currentIndex + 1) % types.length;
    const nextType = types[nextIndex];
    this.removeTypeClassesByCategory(typeCategory);
    document.body.classList.add(nextType);
    if (typeCategory === "primary") {
      this.settings.primaryType = nextType;
    } else {
      this.settings.secondaryType = nextType;
    }
    this.settings.presetOverride = "";
    await this.saveSettings();
  }
  onunload() {
    this.removeTypeClasses();
  }
  applySettingsToDOM() {
    this.removeTypeClasses();
    document.body.style.setProperty("font-weight", this.settings.fontWeight.toString());
    document.body.style.setProperty("--file-line-width", `${this.settings.fontWidth}%`);
    document.body.style.setProperty("--grotto-toolbar-rows", `${this.settings.mobileToolbarheight}`);
    const tableBorders = this.settings.tableStyle ? "separate" : "collapse";
    document.body.style.setProperty("--grotto-table-border-style", tableBorders);
    const pointerEvents = this.settings.tagInteraction ? "none" : "auto";
    document.body.style.setProperty("--grotto-tag-pointer-events", pointerEvents);
    const mobileStatus = this.settings.mobileStatusbar ? "var(--grotto-8)" : "var(--background-primary)";
    document.body.style.setProperty("--system-status-background", mobileStatus);
    const blockquoteBorder = this.settings.blockquoteBorder ? "var(--grotto-8)" : "var(--text-normal)";
    document.body.style.setProperty("--grotto-blockquote-border-color", blockquoteBorder);
    const calloutBackground = this.settings.calloutBackground ? "var(--grotto-8)" : "var(--background-primary)";
    document.body.style.setProperty("--grotto-callout-background-color", calloutBackground);
    document.body.style.setProperty("--embed-max-height", `${this.settings.embedHeight}px`);
    const embedTitleDisplay = this.settings.embedTitle ? "auto" : "none";
    document.body.style.setProperty("--grotto-embed-title-display", embedTitleDisplay);
    if (this.settings.presetOverride && this.settings.presetOverride.trim() !== "") {
      const presetClass = `preset-${this.settings.presetOverride.trim().toLowerCase()}`;
      document.body.classList.add(presetClass);
    } else {
      document.body.classList.add(this.settings.primaryType);
      document.body.classList.add(this.settings.secondaryType);
    }
  }
  // Check for presets in the css and theme files to display in the settings tab
  getAvailablePresets() {
    if (this.cachedPresets) return this.cachedPresets;
    const presetRegex = /\.preset-([a-zA-Z0-9_-]+)/g;
    const presets = /* @__PURE__ */ new Set();
    for (const sheet of Array.from(document.styleSheets)) {
      try {
        const rules = sheet.cssRules;
        for (const rule of Array.from(rules)) {
          if (rule instanceof CSSStyleRule) {
            let match;
            while (match = presetRegex.exec(rule.selectorText)) {
              presets.add(match[1]);
            }
          }
        }
      } catch (e) {
        continue;
      }
    }
    this.cachedPresets = Array.from(presets).sort();
    return this.cachedPresets;
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    this.settings = { ...DEFAULT_SETTINGS, ...loadedData };
  }
  async saveSettings() {
    await this.saveData(this.settings);
    this.applySettingsToDOM();
  }
};
var PokeSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    function capitalize(str) {
      return str.charAt(0).toUpperCase() + str.slice(1);
    }
    containerEl.createEl("div", { cls: "setting-item setting-item-heading" }).createEl("div", { cls: "setting-item-info" }).createEl("div", { text: "Color Controls", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Primary Type").setDesc("Select a primary color type").addButton((button) => {
      const typeText = this.plugin.settings.primaryType.replace("primary-type-", "");
      button.setButtonText(capitalize(typeText)).onClick(() => {
        new TypeSuggestModal(this.app, async (chosenType) => {
          this.plugin.settings.primaryType = `primary-type-${chosenType}`;
          this.plugin.settings.presetOverride = "";
          await this.plugin.saveSettings();
          this.display();
        }).open();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Secondary Type").setDesc("Select a secondary color type").addButton((button) => {
      const typeText = this.plugin.settings.secondaryType.replace("secondary-type-", "");
      button.setButtonText(capitalize(typeText)).onClick(() => {
        new TypeSuggestModal(this.app, async (chosenType) => {
          this.plugin.settings.secondaryType = `secondary-type-${chosenType}`;
          this.plugin.settings.presetOverride = "";
          await this.plugin.saveSettings();
          this.display();
        }).open();
      });
    });
    const availablePresets = this.plugin.getAvailablePresets();
    const displayPresets = availablePresets.map(
      (name) => name.charAt(0).toUpperCase() + name.slice(1)
    );
    let presetInfoText = displayPresets.length > 0 ? `Available presets: ${displayPresets.join(", ")}` : `No preset classes found in loaded stylesheets.`;
    new import_obsidian.Setting(containerEl).setName("Preset Override").setDesc(createFragment((frag) => {
      frag.appendText("Select a custom preset to apply a predefined style");
      frag.appendChild(document.createElement("br"));
      const presetsLine = document.createElement("div");
      presetsLine.textContent = presetInfoText;
      frag.appendChild(presetsLine);
    })).addButton((button) => {
      const currentPreset = this.plugin.settings.presetOverride || "None";
      button.setButtonText(currentPreset.charAt(0).toUpperCase() + currentPreset.slice(1)).onClick(() => {
        const availablePresets2 = this.plugin.getAvailablePresets();
        new PresetSuggestModal(this.app, availablePresets2, async (chosenPreset) => {
          this.plugin.settings.presetOverride = chosenPreset;
          await this.plugin.saveSettings();
          this.display();
        }).open();
      });
    });
    containerEl.createEl("div", { cls: "setting-item setting-item-heading" }).createEl("div", { cls: "setting-item-info" }).createEl("div", { text: "Text Controls", cls: "setting-item-name" });
    const fontWeightSetting = new import_obsidian.Setting(containerEl).setName("Font Weight").setDesc("Adjust the font weight");
    const currentValueEl = document.createElement("div");
    currentValueEl.textContent = `Current weight: ${this.plugin.settings.fontWeight || 400}`;
    fontWeightSetting.descEl.appendChild(currentValueEl);
    fontWeightSetting.addSlider((slider) => {
      slider.setLimits(200, 800, 100).setValue(this.plugin.settings.fontWeight || 400).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.fontWeight = value;
        currentValueEl.textContent = `Current weight: ${value}`;
        await this.plugin.saveSettings();
      });
      return slider;
    });
    fontWeightSetting.addExtraButton((btn) => {
      btn.setIcon("reset").setTooltip("Reset to default").onClick(async () => {
        const defaultValue = 400;
        this.plugin.settings.fontWeight = defaultValue;
        currentValueEl.textContent = `Current weight: ${defaultValue}`;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    const fontWidthSetting = new import_obsidian.Setting(containerEl).setName("File Line Width").setDesc("Adjust the width of the viewable lines of text");
    const currentFontWidthEl = document.createElement("div");
    currentFontWidthEl.textContent = `Current width: ${this.plugin.settings.fontWidth || 100}%`;
    fontWidthSetting.descEl.appendChild(currentFontWidthEl);
    fontWidthSetting.addSlider((slider) => {
      slider.setLimits(50, 100, 5).setValue(this.plugin.settings.fontWidth || 100).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.fontWidth = value;
        currentFontWidthEl.textContent = `Current width: ${value}%`;
        await this.plugin.saveSettings();
      });
      return slider;
    });
    fontWidthSetting.addExtraButton((btn) => {
      btn.setIcon("reset").setTooltip("Reset to default").onClick(async () => {
        const defaultValue = 100;
        this.plugin.settings.fontWidth = defaultValue;
        currentFontWidthEl.textContent = `Current width: ${defaultValue}%`;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    containerEl.createEl("div", { cls: "setting-item setting-item-heading" }).createEl("div", { cls: "setting-item-info" }).createEl("div", { text: "Table Controls", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Table Border Style").setDesc("Enable to separate the table borders").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.tableStyle).onChange(async (value) => {
        this.plugin.settings.tableStyle = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("div", { cls: "setting-item setting-item-heading" }).createEl("div", { cls: "setting-item-info" }).createEl("div", { text: "Blockquote Controls", cls: "setting-item-name" });
    new import_obsidian.Setting(containerEl).setName("Blockquote Border Accent").setDesc("Enable to use an accented border for blockquotes").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.blockquoteBorder).onChange(async (value) => {
        this.plugin.settings.blockquoteBorder = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Callout Background Accent").setDesc("Enable to use an accented background for callouts").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.calloutBackground).onChange(async (value) => {
        this.plugin.settings.calloutBackground = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("div", { cls: "setting-item setting-item-heading" }).createEl("div", { cls: "setting-item-info" }).createEl("div", { text: "Embed Controls", cls: "setting-item-name" });
    const embedHeightSetting = new import_obsidian.Setting(containerEl).setName("Embed Max Height").setDesc("Set the maximum viewable height of embeds");
    const currentEmbedHeight = document.createElement("div");
    currentEmbedHeight.textContent = `Current height: ${this.plugin.settings.embedHeight || 4e3}px`;
    embedHeightSetting.descEl.appendChild(currentEmbedHeight);
    embedHeightSetting.addSlider((slider) => {
      slider.setLimits(100, 8e3, 100).setValue(this.plugin.settings.embedHeight || 4e3).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.embedHeight = value;
        currentEmbedHeight.textContent = `Current height: ${value}px`;
        await this.plugin.saveSettings();
      });
      return slider;
    });
    embedHeightSetting.addExtraButton((btn) => {
      btn.setIcon("reset").setTooltip("Reset to default").onClick(async () => {
        const defaultValue = 4e3;
        this.plugin.settings.embedHeight = defaultValue;
        currentEmbedHeight.textContent = `Current height: ${defaultValue}px`;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Embed Title").setDesc("Enable titles in embeds").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.embedTitle).onChange(async (value) => {
        this.plugin.settings.embedTitle = value;
        await this.plugin.saveSettings();
      });
    });
    containerEl.createEl("div", { cls: "setting-item setting-item-heading" }).createEl("div", { cls: "setting-item-info" }).createEl("div", { text: "Mobile Controls", cls: "setting-item-name" });
    const mobileToolbarSetting = new import_obsidian.Setting(containerEl).setName("Mobile Toolbar Height").setDesc("Set the maximum number of rows of tools to show for the mobile toolbar");
    const currentMobileToolbarHeight = document.createElement("div");
    currentMobileToolbarHeight.textContent = `Current height: ${this.plugin.settings.mobileToolbarheight || 2} rows`;
    mobileToolbarSetting.descEl.appendChild(currentMobileToolbarHeight);
    mobileToolbarSetting.addSlider((slider) => {
      slider.setLimits(1, 4, 1).setValue(this.plugin.settings.mobileToolbarheight || 2).setDynamicTooltip().onChange(async (value) => {
        this.plugin.settings.mobileToolbarheight = value;
        currentMobileToolbarHeight.textContent = `Current height: ${value} rows`;
        await this.plugin.saveSettings();
      });
      return slider;
    });
    mobileToolbarSetting.addExtraButton((btn) => {
      btn.setIcon("reset").setTooltip("Reset to default").onClick(async () => {
        const defaultValue = 2;
        this.plugin.settings.mobileToolbarheight = defaultValue;
        currentMobileToolbarHeight.textContent = `Current height: ${defaultValue} rows`;
        await this.plugin.saveSettings();
        this.display();
      });
    });
    new import_obsidian.Setting(containerEl).setName("Tag Interaction").setDesc("Disable tag search when clicking on a tag").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.tagInteraction).onChange(async (value) => {
        this.plugin.settings.tagInteraction = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian.Setting(containerEl).setName("System Status Bar Accent").setDesc("Enable accented system status bar").addToggle((toggle) => {
      toggle.setValue(this.plugin.settings.mobileStatusbar).onChange(async (value) => {
        this.plugin.settings.mobileStatusbar = value;
        await this.plugin.saveSettings();
      });
    });
    const resetSetting = new import_obsidian.Setting(containerEl).setName("Reset Settings").setDesc('Reset all settings and enable the "Clobbopus" preset').addButton(
      (button) => button.setButtonText("Reset").setCta().onClick(async () => {
        this.plugin.settings = {
          ...DEFAULT_SETTINGS,
          presetOverride: "Clobbopus"
        };
        await this.plugin.saveSettings();
        new import_obsidian.Notice('Settings reset and "Clobbopus" preset applied!');
        this.display();
      })
    );
    resetSetting.settingEl.style.marginTop = "1.5em";
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBhZGRJY29uLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIE5vdGljZSwgTW9kYWwsIFN1Z2dlc3RNb2RhbCB9IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIFBva2VUeXBlU2V0dGluZ3Mge1xuXHRteVNldHRpbmc6IHN0cmluZztcblx0cHJpbWFyeVR5cGU6IHN0cmluZztcblx0c2Vjb25kYXJ5VHlwZTogc3RyaW5nO1xuXHRwcmVzZXRPdmVycmlkZTogc3RyaW5nO1xuXHRmb250V2VpZ2h0OiBudW1iZXI7XG5cdGZvbnRXaWR0aDogbnVtYmVyO1xuXHR0YWdJbnRlcmFjdGlvbjogYm9vbGVhbjtcblx0dGFibGVTdHlsZTogYm9vbGVhbjtcblx0bW9iaWxlU3RhdHVzYmFyOiBib29sZWFuO1xuXHRtb2JpbGVUb29sYmFyaGVpZ2h0OiBudW1iZXI7XG5cdGJsb2NrcXVvdGVCb3JkZXI6IGJvb2xlYW47XG5cdGNhbGxvdXRCYWNrZ3JvdW5kOiBib29sZWFuO1xuXHRlbWJlZEhlaWdodDogbnVtYmVyO1xuXHRlbWJlZFRpdGxlOiBib29sZWFuO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBQb2tlVHlwZVNldHRpbmdzID0ge1xuXHRteVNldHRpbmc6ICdkZWZhdWx0Jyxcblx0cHJpbWFyeVR5cGU6ICdwcmltYXJ5LXR5cGUtbm9ybWFsJyxcblx0c2Vjb25kYXJ5VHlwZTogJ3NlY29uZGFyeS10eXBlLXN0ZWVsJyxcblx0cHJlc2V0T3ZlcnJpZGU6IFwiXCIsXG5cdGZvbnRXZWlnaHQ6IDQwMCxcblx0Zm9udFdpZHRoOiAxMDAsXG5cdHRhZ0ludGVyYWN0aW9uOiB0cnVlLFxuXHR0YWJsZVN0eWxlOiBmYWxzZSxcblx0bW9iaWxlU3RhdHVzYmFyOiBmYWxzZSxcblx0bW9iaWxlVG9vbGJhcmhlaWdodDogMixcblx0YmxvY2txdW90ZUJvcmRlcjogZmFsc2UsXG5cdGNhbGxvdXRCYWNrZ3JvdW5kOiBmYWxzZSxcblx0ZW1iZWRIZWlnaHQ6IDQwMDAsXG5cdGVtYmVkVGl0bGU6IHRydWUsXG59XG5cbmNvbnN0IHBva2Vtb25UeXBlcyA9IFsnbm9ybWFsJywgJ2ZpZ2h0aW5nJywgJ2ZseWluZycsICdwb2lzb24nLCAnZ3JvdW5kJywgJ3JvY2snLCAnYnVnJywgJ2dob3N0JywgJ3N0ZWVsJywgJ2ZpcmUnLCAnd2F0ZXInLCAnZ3Jhc3MnLCAnZWxlY3RyaWMnLCAncHN5Y2hpYycsICdpY2UnLCAnZHJhZ29uJywgJ2RhcmsnLCAnZmFpcnknXSBhcyBjb25zdDtcbmNvbnN0IHByaW1hcnlUeXBlcyA9IHBva2Vtb25UeXBlcy5tYXAodHlwZSA9PiBgcHJpbWFyeS10eXBlLSR7dHlwZX1gKTtcbmNvbnN0IHNlY29uZGFyeVR5cGVzID0gcG9rZW1vblR5cGVzLm1hcCh0eXBlID0+IGBzZWNvbmRhcnktdHlwZS0ke3R5cGV9YCk7XG5cbmNsYXNzIFR5cGVTdWdnZXN0TW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8c3RyaW5nPiB7XG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcml2YXRlIG9uQ2hvb3NlOiAodHlwZTogc3RyaW5nKSA9PiB2b2lkKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLnNldFBsYWNlaG9sZGVyKFwiU2VhcmNoIFBva1x1MDBFOW1vbiB0eXBlcy4uLlwiKTtcblx0fVxuXHRnZXRTdWdnZXN0aW9ucyhxdWVyeTogc3RyaW5nKTogc3RyaW5nW10ge1xuXHRcdHJldHVybiBwb2tlbW9uVHlwZXMuZmlsdGVyKHR5cGUgPT5cblx0XHRcdHR5cGUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhxdWVyeS50b0xvd2VyQ2FzZSgpKVxuXHRcdCk7XG5cdH1cblx0cmVuZGVyU3VnZ2VzdGlvbih0eXBlOiBzdHJpbmcsIGVsOiBIVE1MRWxlbWVudCkge1xuXHRcdGVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpIH0pO1xuXHR9XG5cdG9uQ2hvb3NlU3VnZ2VzdGlvbih0eXBlOiBzdHJpbmcsIGV2dDogTW91c2VFdmVudCB8IEtleWJvYXJkRXZlbnQpIHtcblx0XHR0aGlzLm9uQ2hvb3NlKHR5cGUpO1xuXHR9XG5cdG9uT3BlbigpIHtcblx0XHRzdXBlci5vbk9wZW4oKTtcblx0XHR0aGlzLmNvbnRhaW5lckVsLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW4tZ3JvdHRvLXR5cGVzXCIpO1xuXHR9XG59XG5jbGFzcyBQcmVzZXRTdWdnZXN0TW9kYWwgZXh0ZW5kcyBTdWdnZXN0TW9kYWw8c3RyaW5nPiB7XG5cdHByaXZhdGUgcHJlc2V0czogc3RyaW5nW107XG5cdGNvbnN0cnVjdG9yKGFwcDogQXBwLCBwcmVzZXRzOiBzdHJpbmdbXSwgcHJpdmF0ZSBvbkNob29zZTogKHByZXNldDogc3RyaW5nKSA9PiB2b2lkKSB7XG5cdFx0c3VwZXIoYXBwKTtcblx0XHR0aGlzLnByZXNldHMgPSBwcmVzZXRzO1xuXHRcdHRoaXMuc2V0UGxhY2Vob2xkZXIoXCJTZWFyY2ggYXZhaWxhYmxlIHByZXNldHMuLi5cIik7XG5cdH1cblx0Z2V0U3VnZ2VzdGlvbnMocXVlcnk6IHN0cmluZyk6IHN0cmluZ1tdIHtcblx0XHRyZXR1cm4gdGhpcy5wcmVzZXRzLmZpbHRlcihwcmVzZXQgPT5cblx0XHRcdHByZXNldC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5LnRvTG93ZXJDYXNlKCkpXG5cdFx0KTtcblx0fVxuXHRyZW5kZXJTdWdnZXN0aW9uKHByZXNldDogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQpIHtcblx0XHRlbC5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBwcmVzZXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBwcmVzZXQuc2xpY2UoMSkgfSk7XG5cdH1cblx0b25DaG9vc2VTdWdnZXN0aW9uKHByZXNldDogc3RyaW5nLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KSB7XG5cdFx0dGhpcy5vbkNob29zZShwcmVzZXQpO1xuXHR9XG5cdG9uT3BlbigpIHtcblx0XHRzdXBlci5vbk9wZW4oKTtcblx0XHR0aGlzLmNvbnRhaW5lckVsLmNsYXNzTGlzdC5hZGQoXCJoaWRkZW4tZ3JvdHRvLXByZXNldHNcIik7XG5cdH1cbn1cblxuY2xhc3MgVHlwZVNlbGVjdE1vZGFsIGV4dGVuZHMgTW9kYWwge1xuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcHJpdmF0ZSBvbkNob29zZTogKHR5cGU6IHN0cmluZykgPT4gdm9pZCkge1xuXHRcdHN1cGVyKGFwcCk7XG5cdH1cblx0b25PcGVuKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHRcdGNvbnRlbnRFbC5jcmVhdGVFbCgnaDInLCB7IHRleHQ6ICdDaG9vc2UgYSBQb2tcdTAwRTltb24gdHlwZScgfSk7XG5cdFx0cG9rZW1vblR5cGVzLmZvckVhY2godHlwZSA9PiB7XG5cdFx0XHRuZXcgU2V0dGluZyhjb250ZW50RWwpXG5cdFx0XHRcdC5zZXROYW1lKHR5cGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyB0eXBlLnNsaWNlKDEpKVxuXHRcdFx0XHQuYWRkQnV0dG9uKGJ0biA9PlxuXHRcdFx0XHRcdGJ0bi5zZXRCdXR0b25UZXh0KFwiU2VsZWN0XCIpXG5cdFx0XHRcdFx0XHQub25DbGljaygoKSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMub25DaG9vc2UodHlwZSk7XG5cdFx0XHRcdFx0XHRcdHRoaXMuY2xvc2UoKTtcblx0XHRcdFx0XHRcdH0pKTtcblx0XHR9KTtcblx0fVxuXHRvbkNsb3NlKCkge1xuXHRcdGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuXHRcdGNvbnRlbnRFbC5lbXB0eSgpO1xuXHR9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhpZGRlbkdyb3R0byBleHRlbmRzIFBsdWdpbiB7XG5cdHNldHRpbmdzOiBQb2tlVHlwZVNldHRpbmdzO1xuXHRwcml2YXRlIGNhY2hlZFByZXNldHM6IHN0cmluZ1tdIHwgbnVsbCA9IG51bGw7XG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXHRcdHRoaXMuYXBwbHlTZXR0aW5nc1RvRE9NKCk7XG5cdFx0Ly8gQ3VzdG9tIGljb25zIGZvciB0aGUgcmliYm9uIGJ1dHRvbnNcblx0XHRhZGRJY29uKCdjeWNsZS1wcmltYXJ5LXR5cGUnLCAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmlld0JveD1cIjAgMCAyNiAyNlwiIHZlcnNpb249XCIxLjFcIj48ZyBpZD1cInN1cmZhY2UxXCI+PHBhdGggc3R5bGU9XCIgc3Ryb2tlOmN1cnJlbnRDb2xvcjtmaWxsLXJ1bGU6ZXZlbm9kZDtmaWxsOm5vbmU7ZmlsbC1vcGFjaXR5OjE7XCIgZD1cIk0gMTMuMTU2MjUgMTEuOTQ5MjE5IEMgMTMuMzIwMzEyIDExLjg0NzY1NiAxMy40NTcwMzEgMTEuNjQwNjI1IDEzLjU3MDMxMiAxMS40MTAxNTYgQyAxNS4wMzUxNTYgMTIuMDA3ODEyIDE2LjA2MjUgMTMuNDIxODc1IDE2LjA2MjUgMTUuMDcwMzEyIEMgMTYuMDYyNSAxNy4yNjE3MTkgMTQuMjQ2MDk0IDE5LjAzOTA2MiAxMi4wMDc4MTIgMTkuMDM5MDYyIEMgMTEuMDg1OTM4IDE5LjAzOTA2MiAxMC4yMzgyODEgMTguNzQyMTg4IDkuNTU4NTk0IDE4LjIzNDM3NSBDIDkuMzM1OTM4IDE4LjEyODkwNiA5LjE1MjM0NCAxOC4wMjczNDQgOSAxNy45NDUzMTIgQyA4Ljc2OTUzMSAxNy44MTY0MDYgOC42MTMyODEgMTcuNzM0Mzc1IDguNTE5NTMxIDE3Ljc0NjA5NCBDIDguMjM4MjgxIDE3Ljc4NTE1NiA4LjMyMDMxMiAxOC4wNDI5NjkgOC4zOTQ1MzEgMTguMjc3MzQ0IEMgOC40NDUzMTIgMTguNDMzNTk0IDguNDkyMTg4IDE4LjU4MjAzMSA4LjQxNzk2OSAxOC42NDQ1MzEgQyA4LjM0Mzc1IDE4LjcwNzAzMSA4LjA5NzY1NiAxOC40NzI2NTYgNy44MTI1IDE4LjE5OTIxOSBDIDcuNDIxODc1IDE3LjgyODEyNSA2Ljk1NzAzMSAxNy4zODI4MTIgNi43MzQzNzUgMTcuNTE5NTMxIEMgNi41NjI1IDE3LjYyNSA2LjczMDQ2OSAxNy45MTAxNTYgNi45Mzc1IDE4LjI2MTcxOSBMIDYuOTUzMTI1IDE4LjI4NTE1NiBDIDcuMDM5MDYyIDE4LjQzMzU5NCA3LjE0MDYyNSAxOC41ODU5MzggNy4yMzQzNzUgMTguNzIyNjU2IEMgNy40MjE4NzUgMTkuMDAzOTA2IDcuNTc0MjE5IDE5LjIzMDQ2OSA3LjQ5NjA5NCAxOS4yNjU2MjUgQyA3LjQwNjI1IDE5LjMxMjUgNi43Njk1MzEgMTguODgyODEyIDYuMjMwNDY5IDE4LjI4NTE1NiBDIDYuMDIzNDM4IDE4LjA1NDY4OCA1LjgyNDIxOSAxNy44MDg1OTQgNS42MzY3MTkgMTcuNTc0MjE5IEMgNS4yMzA0NjkgMTcuMDY2NDA2IDQuODkwNjI1IDE2LjY0NDUzMSA0LjY5OTIxOSAxNi42OTUzMTIgQyA0LjQ2ODc1IDE2Ljc1MzkwNiA0LjY0NDUzMSAxNy4yMjY1NjIgNC44OTg0MzggMTcuNjgzNTk0IEMgNS4wMTU2MjUgMTcuODk4NDM4IDUuMTU2MjUgMTguMTEzMjgxIDUuMjc3MzQ0IDE4LjMwMDc4MSBDIDUuNDY4NzUgMTguNTkzNzUgNS42MTMyODEgMTguODE2NDA2IDUuNTU4NTk0IDE4Ljg0Mzc1IEMgNS40ODgyODEgMTguODc4OTA2IDQuODcxMDk0IDE4LjI3NzM0NCA0LjQ1MzEyNSAxNy41MTk1MzEgQyA0LjIwMzEyNSAxNy4wNjY0MDYgMy45OTIxODggMTYuNTcwMzEyIDMuODI0MjE5IDE2LjE2NDA2MiBDIDMuNjQwNjI1IDE1LjcyNjU2MiAzLjUwMzkwNiAxNS40MDIzNDQgMy40MTQwNjIgMTUuMzY3MTg4IEMgMy4xMDE1NjIgMTUuMjUzOTA2IDMuMTAxNTYyIDE1Ljg5NDUzMSAzLjIyNjU2MiAxNi44MTY0MDYgQyAzLjI0MjE4OCAxNi45MzM1OTQgMy4yNjU2MjUgMTcuMDYyNSAzLjI5Njg3NSAxNy4xOTE0MDYgQyA0LjUxNTYyNSAyMS4xMjg5MDYgOC4yNTc4MTIgMjQgMTIuNjgzNTk0IDI0IEMgMTguMDk3NjU2IDI0IDIyLjQ4ODI4MSAxOS43MDcwMzEgMjIuNDg4MjgxIDE0LjQxMDE1NiBDIDIyLjQ4ODI4MSA5LjM3MTA5NCAxOC41MTE3MTkgNS4yMzgyODEgMTMuNDU3MDMxIDQuODUxNTYyIEMgMTMuNDY0ODQ0IDQuNjEzMjgxIDEzLjU4OTg0NCA0LjE0NDUzMSAxMy41ODk4NDQgNC4xNDQ1MzEgQyAxMy41ODk4NDQgNC4xNDQ1MzEgMTQuNDgwNDY5IDEuOTg0Mzc1IDE0LjUyNzM0NCAxLjUyMzQzOCBDIDE0LjUzMTI1IDEuNDkyMTg4IDE0LjUzNTE1NiAxLjQ2MDkzOCAxNC41MzkwNjIgMS40MjU3ODEgQyAxNC41OTM3NSAwLjkyNTc4MSAxNC42OTkyMTkgMCAxMy45MDIzNDQgMCBDIDEzLjQ3NjU2MiAwIDEzLjI3NzM0NCAwLjMxNjQwNiAxMy4wNTA3ODEgMC42Nzk2ODggQyAxMi45NjQ4NDQgMC44MTY0MDYgMTIuODcxMDk0IDAuOTY0ODQ0IDEyLjc2MTcxOSAxLjEwMTU2MiBDIDExLjk3MjY1NiAyLjA4OTg0NCAxMC42NDQ1MzEgMy4zMjAzMTIgOS44OTA2MjUgMy45NzY1NjIgQyA4LjI5Njg3NSA1LjM2NzE4OCA2LjczMDQ2OSA2LjUwNzgxMiA1LjgyMDMxMiA3LjE3MTg3NSBDIDUuNDA2MjUgNy40NzY1NjIgNS4xMjUgNy42Nzk2ODggNS4wMzkwNjIgNy43NjU2MjUgQyA0LjM4NjcxOSA4LjQwMjM0NCAyLjA0Njg3NSAxMi42MjEwOTQgMi4wNDY4NzUgMTIuNjIxMDk0IEMgMi4wNDY4NzUgMTIuNjIxMDk0IDEuMjg5MDYyIDEzLjk3NjU2MiAxLjU1ODU5NCAxNC4yNTM5MDYgQyAxLjgyODEyNSAxNC41MjczNDQgMi40NzY1NjIgMTQuNDY0ODQ0IDIuNDc2NTYyIDE0LjQ2NDg0NCBDIDIuNDc2NTYyIDE0LjQ2NDg0NCAxMS4xOTE0MDYgMTIuNDY0ODQ0IDExLjk3MjY1NiAxMi4zMDQ2ODggQyAxMi4xODM1OTQgMTIuMjY1NjI1IDEyLjMzMjAzMSAxMi4yMzgyODEgMTIuNDQ1MzEyIDEyLjIyMjY1NiBDIDEyLjc1MzkwNiAxMi4xNjc5NjkgMTIuODA4NTk0IDEyLjE2MDE1NiAxMy4xNTYyNSAxMS45NDkyMTkgWiBNIDYuOTk2MDk0IDkuMzc4OTA2IEMgNi41MjczNDQgOS44MjQyMTkgNS43NSAxMC44ODI4MTIgNS43NSAxMC44ODI4MTIgQyA1Ljc1IDEwLjg4MjgxMiA3LjE5NTMxMiAxMC45NzI2NTYgNy45ODgyODEgMTAuMjE4NzUgQyA4Ljc4MTI1IDkuNDY0ODQ0IDguNjAxNTYyIDguMTc1NzgxIDguNjAxNTYyIDguMTc1NzgxIEMgOC42MDE1NjIgOC4xNzU3ODEgNy40NjQ4NDQgOC45MzM1OTQgNi45OTYwOTQgOS4zNzg5MDYgWiBNIDYuOTk2MDk0IDkuMzc4OTA2IFwiLz48L2c+PC9zdmc+Jyk7XG5cdFx0YWRkSWNvbignY3ljbGUtc2Vjb25kYXJ5LXR5cGUnLCAnPD94bWwgdmVyc2lvbj1cIjEuMFwiIGVuY29kaW5nPVwiVVRGLThcIj8+PHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIgdmlld0JveD1cIjAgMCAyNiAyNlwiIHZlcnNpb249XCIxLjFcIj48ZyBpZD1cInN1cmZhY2UxXCI+PHBhdGggc3R5bGU9XCIgc3Ryb2tlOmN1cnJlbnRDb2xvcjtmaWxsLXJ1bGU6ZXZlbm9kZDtmaWxsOm5vbmU7ZmlsbC1vcGFjaXR5OjE7XCIgZD1cIk0gOC4zNzg5MDYgMjIuMzk0NTMxIEMgMTEuODk0NTMxIDIyLjM5NDUzMSAxNC45MDIzNDQgMjAuNDQxNDA2IDE2LjE0NDUzMSAxNy42Njc5NjkgQyAxNi4xNjAxNTYgMTcuNjM2NzE5IDExLjE1NjI1IDE4Ljk2ODc1IDExLjMxNjQwNiAxOC41IEMgMTEuMzg2NzE5IDE4LjI4OTA2MiAxNC40NTMxMjUgMTcuMTY3OTY5IDE2LjY5MTQwNiAxNS44NTkzNzUgQyAxNy45NzI2NTYgMTUuMTA5Mzc1IDE4LjU2NjQwNiAxMy41MTk1MzEgMTguNTY2NDA2IDEzLjUxOTUzMSBDIDE4LjU2NjQwNiAxMy41MTk1MzEgMTYuNDAyMzQ0IDE0LjU3MDMxMiAxNS4zMDg1OTQgMTQuODM1OTM4IEMgMTMuMTAxNTYyIDE1LjM3NSAxMS4xNjQwNjIgMTUuMzE2NDA2IDExLjE2NDA2MiAxNS4yNTc4MTIgQyAxMS4xNjQwNjIgMTUuMTM2NzE5IDE0LjM4NjcxOSAxNC41MjczNDQgMTguODYzMjgxIDExLjc5Njg3NSBDIDIwLjk2ODc1IDEwLjUxMTcxOSAyMS41NDI5NjkgOC4zMDA3ODEgMjEuNTQyOTY5IDguMzAwNzgxIEMgMjEuNTQyOTY5IDguMzAwNzgxIDE5LjIyNjU2MiA5LjY3OTY4OCAxNy44MjgxMjUgMTAuMTM2NzE5IEMgMTQuNTAzOTA2IDExLjIxODc1IDExLjQ3NjU2MiAxMS41NDI5NjkgMTEuNDc2NTYyIDExLjM5NDUzMSBDIDExLjQ3NjU2MiAxMS4wODIwMzEgMTQuMTQwNjI1IDEwLjM1MTU2MiAxNi45Njg3NSA4Ljk4MDQ2OSBDIDE4LjQ0MTQwNiA4LjI2OTUzMSAxOS43MTA5MzggNy4zMzU5MzggMjEuMTg3NSA2LjMwMDc4MSBDIDIzLjYwMTU2MiA0LjYwOTM3NSAyNCAxLjU5Mzc1IDI0IDEuNTkzNzUgQyAyNCAxLjU5Mzc1IDIxLjYxNzE4OCAzLjEyODkwNiAyMC40NTcwMzEgMy42NDA2MjUgQyAxNS42NjQwNjIgNS43NDIxODggMTEuNDI5Njg4IDYuODQ3NjU2IDguMzc4OTA2IDcuMDg1OTM4IEMgMy43Njk1MzEgNy40NDUzMTIgMCAxMC42NjAxNTYgMCAxNC44MzU5MzggQyAwIDE5LjAxMTcxOSAzLjc1IDIyLjM5NDUzMSA4LjM3ODkwNiAyMi4zOTQ1MzEgWiBNIDguMzc4OTA2IDIyLjM5NDUzMSBcIi8+PC9nPjwvc3ZnPicpO1xuXG5cdFx0dGhpcy5hZGRSaWJib25JY29uKCdjeWNsZS1wcmltYXJ5LXR5cGUnLCAnQ3ljbGUgcHJpbWFyeSB0eXBlJywgYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgdGhpcy5jeWNsZVR5cGUoJ3ByaW1hcnknKTtcblx0XHR9KTtcblx0XHR0aGlzLmFkZFJpYmJvbkljb24oJ2N5Y2xlLXNlY29uZGFyeS10eXBlJywgJ0N5Y2xlIGRlY29uZGFyeSB0eXBlJywgYXN5bmMgKCkgPT4ge1xuXHRcdFx0YXdhaXQgdGhpcy5jeWNsZVR5cGUoJ3NlY29uZGFyeScpO1xuXHRcdH0pO1xuXHRcdC8vIERyYWdvbiBzeW1ib2wgY29udHJvbHMgcHJpbWFyeSB0eXBlc1xuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2N5Y2xlLXByaW1hcnktdHlwZScsXG5cdFx0XHRuYW1lOiAnQ3ljbGUgcHJpbWFyeSB0eXBlJyxcblx0XHRcdGljb246ICdjeWNsZS1wcmltYXJ5LXR5cGUnLFxuXHRcdFx0Y2FsbGJhY2s6IGFzeW5jICgpID0+IGF3YWl0IHRoaXMuY3ljbGVUeXBlKCdwcmltYXJ5JyksXG5cdFx0fSk7XG5cdFx0Ly8gRmx5aW5nIHN5bWJvbCBjb250cm9scyBzZWNvbmRhcnkgdHlwZXNcblx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0aWQ6ICdjeWNsZS1zZWNvbmRhcnktdHlwZScsXG5cdFx0XHRuYW1lOiAnQ3ljbGUgc2Vjb25kYXJ5IHR5cGUnLFxuXHRcdFx0aWNvbjogJ2N5Y2xlLXNlY29uZGFyeS10eXBlJyxcblx0XHRcdGNhbGxiYWNrOiBhc3luYyAoKSA9PiBhd2FpdCB0aGlzLmN5Y2xlVHlwZSgnc2Vjb25kYXJ5JyksXG5cdFx0fSk7XG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKG5ldyBQb2tlU2V0dGluZ3NUYWIodGhpcy5hcHAsIHRoaXMpKTtcblx0fVxuXG5cdHByaXZhdGUgcmVtb3ZlVHlwZUNsYXNzZXMoKSB7XG5cdFx0QXJyYXkuZnJvbShkb2N1bWVudC5ib2R5LmNsYXNzTGlzdCkuZm9yRWFjaChjbHMgPT4ge1xuXHRcdFx0aWYgKGNscy5zdGFydHNXaXRoKCdwcmltYXJ5LXR5cGUtJykgfHwgY2xzLnN0YXJ0c1dpdGgoJ3NlY29uZGFyeS10eXBlLScpIHx8IGNscy5zdGFydHNXaXRoKCdwcmVzZXQtJykpIHtcblx0XHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGNscyk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIHJlbW92ZVR5cGVDbGFzc2VzQnlDYXRlZ29yeSh0eXBlQ2F0ZWdvcnk6ICdwcmltYXJ5JyB8ICdzZWNvbmRhcnknKSB7XG5cdFx0QXJyYXkuZnJvbShkb2N1bWVudC5ib2R5LmNsYXNzTGlzdCkuZm9yRWFjaChjbHMgPT4ge1xuXHRcdFx0aWYgKGNscy5zdGFydHNXaXRoKGAke3R5cGVDYXRlZ29yeX0tdHlwZS1gKSkge1xuXHRcdFx0XHRkb2N1bWVudC5ib2R5LmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcblx0XHRcdH1cblx0XHR9KTtcblx0fVxuXHQvLyBDeWNsZSB0aHJvdWdoIHRoZSB0eXBlcyBpbiBvcmRlclxuXHRhc3luYyBjeWNsZVR5cGUodHlwZUNhdGVnb3J5OiAncHJpbWFyeScgfCAnc2Vjb25kYXJ5Jykge1xuXHRcdGNvbnN0IHR5cGVzID0gdHlwZUNhdGVnb3J5ID09PSAncHJpbWFyeScgPyBwcmltYXJ5VHlwZXMgOiBzZWNvbmRhcnlUeXBlcztcblx0XHRjb25zdCBrZXkgPSBgJHt0eXBlQ2F0ZWdvcnl9VHlwZWAgYXMga2V5b2YgUG9rZVR5cGVTZXR0aW5ncztcblx0XHRjb25zdCBjdXJyZW50VHlwZSA9IHRoaXMuc2V0dGluZ3Nba2V5XSBhcyBzdHJpbmc7XG5cdFx0Y29uc3QgY3VycmVudEluZGV4ID0gdHlwZXMuaW5kZXhPZihjdXJyZW50VHlwZSk7XG5cdFx0Y29uc3QgbmV4dEluZGV4ID0gKGN1cnJlbnRJbmRleCArIDEpICUgdHlwZXMubGVuZ3RoO1xuXHRcdGNvbnN0IG5leHRUeXBlID0gdHlwZXNbbmV4dEluZGV4XTtcblx0XHR0aGlzLnJlbW92ZVR5cGVDbGFzc2VzQnlDYXRlZ29yeSh0eXBlQ2F0ZWdvcnkpO1xuXHRcdGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmFkZChuZXh0VHlwZSk7XG5cblx0XHRpZiAodHlwZUNhdGVnb3J5ID09PSAncHJpbWFyeScpIHtcblx0XHRcdHRoaXMuc2V0dGluZ3MucHJpbWFyeVR5cGUgPSBuZXh0VHlwZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zZXR0aW5ncy5zZWNvbmRhcnlUeXBlID0gbmV4dFR5cGU7XG5cdFx0fVxuXHRcdHRoaXMuc2V0dGluZ3MucHJlc2V0T3ZlcnJpZGUgPSBcIlwiO1xuXHRcdGF3YWl0IHRoaXMuc2F2ZVNldHRpbmdzKCk7XG5cdH1cblx0b251bmxvYWQoKSB7XG5cdFx0dGhpcy5yZW1vdmVUeXBlQ2xhc3NlcygpO1xuXHR9XG5cdGFwcGx5U2V0dGluZ3NUb0RPTSgpIHtcblx0XHR0aGlzLnJlbW92ZVR5cGVDbGFzc2VzKCk7XG5cblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCdmb250LXdlaWdodCcsIHRoaXMuc2V0dGluZ3MuZm9udFdlaWdodC50b1N0cmluZygpKTtcblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCctLWZpbGUtbGluZS13aWR0aCcsIGAke3RoaXMuc2V0dGluZ3MuZm9udFdpZHRofSVgKTtcblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCctLWdyb3R0by10b29sYmFyLXJvd3MnLCBgJHt0aGlzLnNldHRpbmdzLm1vYmlsZVRvb2xiYXJoZWlnaHR9YCk7XG5cdFx0Y29uc3QgdGFibGVCb3JkZXJzID0gdGhpcy5zZXR0aW5ncy50YWJsZVN0eWxlID8gJ3NlcGFyYXRlJyA6ICdjb2xsYXBzZSc7XG5cdFx0ZG9jdW1lbnQuYm9keS5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ncm90dG8tdGFibGUtYm9yZGVyLXN0eWxlJywgdGFibGVCb3JkZXJzKTtcblx0XHRjb25zdCBwb2ludGVyRXZlbnRzID0gdGhpcy5zZXR0aW5ncy50YWdJbnRlcmFjdGlvbiA/ICdub25lJyA6ICdhdXRvJztcblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCctLWdyb3R0by10YWctcG9pbnRlci1ldmVudHMnLCBwb2ludGVyRXZlbnRzKTtcblx0XHRjb25zdCBtb2JpbGVTdGF0dXMgPSB0aGlzLnNldHRpbmdzLm1vYmlsZVN0YXR1c2JhciA/ICd2YXIoLS1ncm90dG8tOCknIDogJ3ZhcigtLWJhY2tncm91bmQtcHJpbWFyeSknO1xuXHRcdGRvY3VtZW50LmJvZHkuc3R5bGUuc2V0UHJvcGVydHkoJy0tc3lzdGVtLXN0YXR1cy1iYWNrZ3JvdW5kJywgbW9iaWxlU3RhdHVzKTtcblx0XHRjb25zdCBibG9ja3F1b3RlQm9yZGVyID0gdGhpcy5zZXR0aW5ncy5ibG9ja3F1b3RlQm9yZGVyID8gJ3ZhcigtLWdyb3R0by04KScgOiAndmFyKC0tdGV4dC1ub3JtYWwpJztcblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCctLWdyb3R0by1ibG9ja3F1b3RlLWJvcmRlci1jb2xvcicsIGJsb2NrcXVvdGVCb3JkZXIpO1xuXHRcdGNvbnN0IGNhbGxvdXRCYWNrZ3JvdW5kID0gdGhpcy5zZXR0aW5ncy5jYWxsb3V0QmFja2dyb3VuZCA/ICd2YXIoLS1ncm90dG8tOCknIDogJ3ZhcigtLWJhY2tncm91bmQtcHJpbWFyeSknO1xuXHRcdGRvY3VtZW50LmJvZHkuc3R5bGUuc2V0UHJvcGVydHkoJy0tZ3JvdHRvLWNhbGxvdXQtYmFja2dyb3VuZC1jb2xvcicsIGNhbGxvdXRCYWNrZ3JvdW5kKTtcblx0XHRkb2N1bWVudC5ib2R5LnN0eWxlLnNldFByb3BlcnR5KCctLWVtYmVkLW1heC1oZWlnaHQnLCBgJHt0aGlzLnNldHRpbmdzLmVtYmVkSGVpZ2h0fXB4YCk7XG5cdFx0Y29uc3QgZW1iZWRUaXRsZURpc3BsYXkgPSB0aGlzLnNldHRpbmdzLmVtYmVkVGl0bGUgPyAnYXV0bycgOiAnbm9uZSc7XG5cdFx0ZG9jdW1lbnQuYm9keS5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1ncm90dG8tZW1iZWQtdGl0bGUtZGlzcGxheScsIGVtYmVkVGl0bGVEaXNwbGF5KTtcblx0XHRpZiAodGhpcy5zZXR0aW5ncy5wcmVzZXRPdmVycmlkZSAmJiB0aGlzLnNldHRpbmdzLnByZXNldE92ZXJyaWRlLnRyaW0oKSAhPT0gXCJcIikge1xuXHRcdFx0Y29uc3QgcHJlc2V0Q2xhc3MgPSBgcHJlc2V0LSR7dGhpcy5zZXR0aW5ncy5wcmVzZXRPdmVycmlkZS50cmltKCkudG9Mb3dlckNhc2UoKX1gO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKHByZXNldENsYXNzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKHRoaXMuc2V0dGluZ3MucHJpbWFyeVR5cGUpO1xuXHRcdFx0ZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKHRoaXMuc2V0dGluZ3Muc2Vjb25kYXJ5VHlwZSk7XG5cdFx0fVxuXHR9XG5cdC8vIENoZWNrIGZvciBwcmVzZXRzIGluIHRoZSBjc3MgYW5kIHRoZW1lIGZpbGVzIHRvIGRpc3BsYXkgaW4gdGhlIHNldHRpbmdzIHRhYlxuXHRnZXRBdmFpbGFibGVQcmVzZXRzKCk6IHN0cmluZ1tdIHtcblx0XHRpZiAodGhpcy5jYWNoZWRQcmVzZXRzKSByZXR1cm4gdGhpcy5jYWNoZWRQcmVzZXRzO1xuXHRcdGNvbnN0IHByZXNldFJlZ2V4ID0gL1xcLnByZXNldC0oW2EtekEtWjAtOV8tXSspL2c7XG5cdFx0Y29uc3QgcHJlc2V0cyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuXHRcdGZvciAoY29uc3Qgc2hlZXQgb2YgQXJyYXkuZnJvbShkb2N1bWVudC5zdHlsZVNoZWV0cykpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHJ1bGVzID0gc2hlZXQuY3NzUnVsZXM7XG5cdFx0XHRcdGZvciAoY29uc3QgcnVsZSBvZiBBcnJheS5mcm9tKHJ1bGVzKSkge1xuXHRcdFx0XHRcdGlmIChydWxlIGluc3RhbmNlb2YgQ1NTU3R5bGVSdWxlKSB7XG5cdFx0XHRcdFx0XHRsZXQgbWF0Y2g7XG5cdFx0XHRcdFx0XHR3aGlsZSAoKG1hdGNoID0gcHJlc2V0UmVnZXguZXhlYyhydWxlLnNlbGVjdG9yVGV4dCkpKSB7XG5cdFx0XHRcdFx0XHRcdHByZXNldHMuYWRkKG1hdGNoWzFdKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gY2F0Y2gge1xuXHRcdFx0XHRjb250aW51ZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5jYWNoZWRQcmVzZXRzID0gQXJyYXkuZnJvbShwcmVzZXRzKS5zb3J0KCk7XG5cdFx0cmV0dXJuIHRoaXMuY2FjaGVkUHJlc2V0cztcblx0fVxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0Y29uc3QgbG9hZGVkRGF0YSA9IGF3YWl0IHRoaXMubG9hZERhdGEoKTtcblx0XHR0aGlzLnNldHRpbmdzID0geyAuLi5ERUZBVUxUX1NFVFRJTkdTLCAuLi5sb2FkZWREYXRhIH07XG5cdH1cblx0YXN5bmMgc2F2ZVNldHRpbmdzKCkge1xuXHRcdGF3YWl0IHRoaXMuc2F2ZURhdGEodGhpcy5zZXR0aW5ncyk7XG5cdFx0dGhpcy5hcHBseVNldHRpbmdzVG9ET00oKTtcblx0fVxufVxuXG5jbGFzcyBQb2tlU2V0dGluZ3NUYWIgZXh0ZW5kcyBQbHVnaW5TZXR0aW5nVGFiIHtcblx0cGx1Z2luOiBIaWRkZW5Hcm90dG87XG5cblx0Y29uc3RydWN0b3IoYXBwOiBBcHAsIHBsdWdpbjogSGlkZGVuR3JvdHRvKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cdFx0ZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHI6IHN0cmluZykge1xuXHRcdFx0cmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKTtcblx0XHR9XG5cdFx0Ly8gQ29sb3IgU2V0dGluZ3Ncblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzZXR0aW5nLWl0ZW0gc2V0dGluZy1pdGVtLWhlYWRpbmcnIH0pLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NldHRpbmctaXRlbS1pbmZvJyB9KS5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnQ29sb3IgQ29udHJvbHMnLCBjbHM6ICdzZXR0aW5nLWl0ZW0tbmFtZScgfSk7XG5cdFx0Ly8gUHJpbWFyeSBjb2xvclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1ByaW1hcnkgVHlwZScpXG5cdFx0XHQuc2V0RGVzYygnU2VsZWN0IGEgcHJpbWFyeSBjb2xvciB0eXBlJylcblx0XHRcdC5hZGRCdXR0b24oYnV0dG9uID0+IHtcblx0XHRcdFx0Y29uc3QgdHlwZVRleHQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmltYXJ5VHlwZS5yZXBsYWNlKCdwcmltYXJ5LXR5cGUtJywgJycpO1xuXHRcdFx0XHRidXR0b24uc2V0QnV0dG9uVGV4dChjYXBpdGFsaXplKHR5cGVUZXh0KSlcblx0XHRcdFx0XHQub25DbGljaygoKSA9PiB7XG5cdFx0XHRcdFx0XHRuZXcgVHlwZVN1Z2dlc3RNb2RhbCh0aGlzLmFwcCwgYXN5bmMgKGNob3NlblR5cGUpID0+IHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucHJpbWFyeVR5cGUgPSBgcHJpbWFyeS10eXBlLSR7Y2hvc2VuVHlwZX1gO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVzZXRPdmVycmlkZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcblx0XHRcdFx0XHRcdH0pLm9wZW4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdC8vIFNlY29uZGFyeSBjb2xvclxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1NlY29uZGFyeSBUeXBlJylcblx0XHRcdC5zZXREZXNjKCdTZWxlY3QgYSBzZWNvbmRhcnkgY29sb3IgdHlwZScpXG5cdFx0XHQuYWRkQnV0dG9uKGJ1dHRvbiA9PiB7XG5cdFx0XHRcdGNvbnN0IHR5cGVUZXh0ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3Muc2Vjb25kYXJ5VHlwZS5yZXBsYWNlKCdzZWNvbmRhcnktdHlwZS0nLCAnJyk7XG5cdFx0XHRcdGJ1dHRvbi5zZXRCdXR0b25UZXh0KGNhcGl0YWxpemUodHlwZVRleHQpKVxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcblx0XHRcdFx0XHRcdG5ldyBUeXBlU3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBhc3luYyAoY2hvc2VuVHlwZSkgPT4ge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5zZWNvbmRhcnlUeXBlID0gYHNlY29uZGFyeS10eXBlLSR7Y2hvc2VuVHlwZX1gO1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wcmVzZXRPdmVycmlkZSA9IFwiXCI7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcblx0XHRcdFx0XHRcdH0pLm9wZW4oKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdC8vIFByZXNldHNcblx0XHRjb25zdCBhdmFpbGFibGVQcmVzZXRzID0gdGhpcy5wbHVnaW4uZ2V0QXZhaWxhYmxlUHJlc2V0cygpO1xuXHRcdGNvbnN0IGRpc3BsYXlQcmVzZXRzID0gYXZhaWxhYmxlUHJlc2V0cy5tYXAobmFtZSA9PlxuXHRcdFx0bmFtZS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG5hbWUuc2xpY2UoMSlcblx0XHQpO1xuXHRcdGxldCBwcmVzZXRJbmZvVGV4dCA9IGRpc3BsYXlQcmVzZXRzLmxlbmd0aCA+IDBcblx0XHRcdD8gYEF2YWlsYWJsZSBwcmVzZXRzOiAke2Rpc3BsYXlQcmVzZXRzLmpvaW4oJywgJyl9YFxuXHRcdFx0OiBgTm8gcHJlc2V0IGNsYXNzZXMgZm91bmQgaW4gbG9hZGVkIHN0eWxlc2hlZXRzLmA7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKFwiUHJlc2V0IE92ZXJyaWRlXCIpXG5cdFx0XHQuc2V0RGVzYyhjcmVhdGVGcmFnbWVudChmcmFnID0+IHtcblx0XHRcdFx0ZnJhZy5hcHBlbmRUZXh0KFwiU2VsZWN0IGEgY3VzdG9tIHByZXNldCB0byBhcHBseSBhIHByZWRlZmluZWQgc3R5bGVcIik7XG5cdFx0XHRcdGZyYWcuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImJyXCIpKTtcblxuXHRcdFx0XHRjb25zdCBwcmVzZXRzTGluZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7IC8vIHdhcyA8c21hbGw+XG5cdFx0XHRcdC8vIFJlbW92ZWQ6IHByZXNldHNMaW5lLnN0eWxlLm9wYWNpdHkgPSAnMC43Jztcblx0XHRcdFx0cHJlc2V0c0xpbmUudGV4dENvbnRlbnQgPSBwcmVzZXRJbmZvVGV4dDtcblxuXHRcdFx0XHRmcmFnLmFwcGVuZENoaWxkKHByZXNldHNMaW5lKTtcblx0XHRcdH0pKVxuXHRcdFx0LmFkZEJ1dHRvbihidXR0b24gPT4ge1xuXHRcdFx0XHRjb25zdCBjdXJyZW50UHJlc2V0ID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MucHJlc2V0T3ZlcnJpZGUgfHwgXCJOb25lXCI7XG5cdFx0XHRcdGJ1dHRvbi5zZXRCdXR0b25UZXh0KGN1cnJlbnRQcmVzZXQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjdXJyZW50UHJlc2V0LnNsaWNlKDEpKVxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHtcblx0XHRcdFx0XHRcdGNvbnN0IGF2YWlsYWJsZVByZXNldHMgPSB0aGlzLnBsdWdpbi5nZXRBdmFpbGFibGVQcmVzZXRzKCk7XG5cdFx0XHRcdFx0XHRuZXcgUHJlc2V0U3VnZ2VzdE1vZGFsKHRoaXMuYXBwLCBhdmFpbGFibGVQcmVzZXRzLCBhc3luYyAoY2hvc2VuUHJlc2V0KSA9PiB7XG5cdFx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnByZXNldE92ZXJyaWRlID0gY2hvc2VuUHJlc2V0O1xuXHRcdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XG5cdFx0XHRcdFx0XHR9KS5vcGVuKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdC8vIFRleHQgU2V0dGluZ3Ncblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzZXR0aW5nLWl0ZW0gc2V0dGluZy1pdGVtLWhlYWRpbmcnIH0pLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NldHRpbmctaXRlbS1pbmZvJyB9KS5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnVGV4dCBDb250cm9scycsIGNsczogJ3NldHRpbmctaXRlbS1uYW1lJyB9KTtcblx0XHQvLyBGb250IFdlaWdodFxuXHRcdGNvbnN0IGZvbnRXZWlnaHRTZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZShcIkZvbnQgV2VpZ2h0XCIpXG5cdFx0XHQuc2V0RGVzYyhcIkFkanVzdCB0aGUgZm9udCB3ZWlnaHRcIik7XG5cblx0XHRjb25zdCBjdXJyZW50VmFsdWVFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGN1cnJlbnRWYWx1ZUVsLnRleHRDb250ZW50ID0gYEN1cnJlbnQgd2VpZ2h0OiAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbnRXZWlnaHQgfHwgNDAwfWA7XG5cdFx0Zm9udFdlaWdodFNldHRpbmcuZGVzY0VsLmFwcGVuZENoaWxkKGN1cnJlbnRWYWx1ZUVsKTtcblxuXHRcdGZvbnRXZWlnaHRTZXR0aW5nLmFkZFNsaWRlcihzbGlkZXIgPT4ge1xuXHRcdFx0c2xpZGVyXG5cdFx0XHRcdC5zZXRMaW1pdHMoMjAwLCA4MDAsIDEwMClcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbnRXZWlnaHQgfHwgNDAwKVxuXHRcdFx0XHQuc2V0RHluYW1pY1Rvb2x0aXAoKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9udFdlaWdodCA9IHZhbHVlO1xuXHRcdFx0XHRcdGN1cnJlbnRWYWx1ZUVsLnRleHRDb250ZW50ID0gYEN1cnJlbnQgd2VpZ2h0OiAke3ZhbHVlfWA7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gc2xpZGVyO1xuXHRcdH0pO1xuXG5cdFx0Zm9udFdlaWdodFNldHRpbmcuYWRkRXh0cmFCdXR0b24oYnRuID0+IHtcblx0XHRcdGJ0bi5zZXRJY29uKCdyZXNldCcpXG5cdFx0XHRcdC5zZXRUb29sdGlwKCdSZXNldCB0byBkZWZhdWx0Jylcblx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGRlZmF1bHRWYWx1ZSA9IDQwMDtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb250V2VpZ2h0ID0gZGVmYXVsdFZhbHVlO1xuXHRcdFx0XHRcdGN1cnJlbnRWYWx1ZUVsLnRleHRDb250ZW50ID0gYEN1cnJlbnQgd2VpZ2h0OiAke2RlZmF1bHRWYWx1ZX1gO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdFx0XHR9KTtcblx0XHR9KTtcblx0XHQvLyBUZXh0IFdpZHRoXG5cdFx0Y29uc3QgZm9udFdpZHRoU2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoXCJGaWxlIExpbmUgV2lkdGhcIilcblx0XHRcdC5zZXREZXNjKFwiQWRqdXN0IHRoZSB3aWR0aCBvZiB0aGUgdmlld2FibGUgbGluZXMgb2YgdGV4dFwiKTtcblxuXHRcdGNvbnN0IGN1cnJlbnRGb250V2lkdGhFbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGN1cnJlbnRGb250V2lkdGhFbC50ZXh0Q29udGVudCA9IGBDdXJyZW50IHdpZHRoOiAke3RoaXMucGx1Z2luLnNldHRpbmdzLmZvbnRXaWR0aCB8fCAxMDB9JWA7XG5cdFx0Zm9udFdpZHRoU2V0dGluZy5kZXNjRWwuYXBwZW5kQ2hpbGQoY3VycmVudEZvbnRXaWR0aEVsKTtcblxuXHRcdGZvbnRXaWR0aFNldHRpbmcuYWRkU2xpZGVyKHNsaWRlciA9PiB7XG5cdFx0XHRzbGlkZXJcblx0XHRcdFx0LnNldExpbWl0cyg1MCwgMTAwLCA1KVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZm9udFdpZHRoIHx8IDEwMClcblx0XHRcdFx0LnNldER5bmFtaWNUb29sdGlwKClcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmZvbnRXaWR0aCA9IHZhbHVlO1xuXHRcdFx0XHRcdGN1cnJlbnRGb250V2lkdGhFbC50ZXh0Q29udGVudCA9IGBDdXJyZW50IHdpZHRoOiAke3ZhbHVlfSVgO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIHNsaWRlcjtcblx0XHR9KTtcblxuXHRcdGZvbnRXaWR0aFNldHRpbmcuYWRkRXh0cmFCdXR0b24oYnRuID0+IHtcblx0XHRcdGJ0bi5zZXRJY29uKCdyZXNldCcpXG5cdFx0XHRcdC5zZXRUb29sdGlwKCdSZXNldCB0byBkZWZhdWx0Jylcblx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGRlZmF1bHRWYWx1ZSA9IDEwMDtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5mb250V2lkdGggPSBkZWZhdWx0VmFsdWU7XG5cdFx0XHRcdFx0Y3VycmVudEZvbnRXaWR0aEVsLnRleHRDb250ZW50ID0gYEN1cnJlbnQgd2lkdGg6ICR7ZGVmYXVsdFZhbHVlfSVgO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdFx0XHR9KTtcblx0XHR9KTtcblx0XHQvLyBUYWJsZSBTZXR0aW5nc1xuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NldHRpbmctaXRlbSBzZXR0aW5nLWl0ZW0taGVhZGluZycgfSkuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc2V0dGluZy1pdGVtLWluZm8nIH0pLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdUYWJsZSBDb250cm9scycsIGNsczogJ3NldHRpbmctaXRlbS1uYW1lJyB9KTtcblx0XHQvLyBUYWJsZSBib3JkZXIgc3R5bGVcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdUYWJsZSBCb3JkZXIgU3R5bGUnKVxuXHRcdFx0LnNldERlc2MoJ0VuYWJsZSB0byBzZXBhcmF0ZSB0aGUgdGFibGUgYm9yZGVycycpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB7XG5cdFx0XHRcdHRvZ2dsZVxuXHRcdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy50YWJsZVN0eWxlKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRhYmxlU3R5bGUgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0Ly8gQmxvY2txdW90ZSBTZXR0aW5nc1xuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NldHRpbmctaXRlbSBzZXR0aW5nLWl0ZW0taGVhZGluZycgfSkuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc2V0dGluZy1pdGVtLWluZm8nIH0pLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6ICdCbG9ja3F1b3RlIENvbnRyb2xzJywgY2xzOiAnc2V0dGluZy1pdGVtLW5hbWUnIH0pO1xuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0Jsb2NrcXVvdGUgQm9yZGVyIEFjY2VudCcpXG5cdFx0XHQuc2V0RGVzYygnRW5hYmxlIHRvIHVzZSBhbiBhY2NlbnRlZCBib3JkZXIgZm9yIGJsb2NrcXVvdGVzJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcblx0XHRcdFx0dG9nZ2xlXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmJsb2NrcXVvdGVCb3JkZXIpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYmxvY2txdW90ZUJvcmRlciA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdDYWxsb3V0IEJhY2tncm91bmQgQWNjZW50Jylcblx0XHRcdC5zZXREZXNjKCdFbmFibGUgdG8gdXNlIGFuIGFjY2VudGVkIGJhY2tncm91bmQgZm9yIGNhbGxvdXRzJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcblx0XHRcdFx0dG9nZ2xlXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmNhbGxvdXRCYWNrZ3JvdW5kKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmNhbGxvdXRCYWNrZ3JvdW5kID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdC8vIEVtYmVkIFNldHRpbmdzXG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnc2V0dGluZy1pdGVtIHNldHRpbmctaXRlbS1oZWFkaW5nJyB9KS5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzZXR0aW5nLWl0ZW0taW5mbycgfSkuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogJ0VtYmVkIENvbnRyb2xzJywgY2xzOiAnc2V0dGluZy1pdGVtLW5hbWUnIH0pO1xuXHRcdC8vIEVtYmVkIE1heCBIZWlnaHRcblx0XHRjb25zdCBlbWJlZEhlaWdodFNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdFbWJlZCBNYXggSGVpZ2h0Jylcblx0XHRcdC5zZXREZXNjKCdTZXQgdGhlIG1heGltdW0gdmlld2FibGUgaGVpZ2h0IG9mIGVtYmVkcycpO1xuXG5cdFx0Y29uc3QgY3VycmVudEVtYmVkSGVpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0Y3VycmVudEVtYmVkSGVpZ2h0LnRleHRDb250ZW50ID0gYEN1cnJlbnQgaGVpZ2h0OiAke3RoaXMucGx1Z2luLnNldHRpbmdzLmVtYmVkSGVpZ2h0IHx8IDQwMDB9cHhgO1xuXHRcdGVtYmVkSGVpZ2h0U2V0dGluZy5kZXNjRWwuYXBwZW5kQ2hpbGQoY3VycmVudEVtYmVkSGVpZ2h0KTtcblx0XHRlbWJlZEhlaWdodFNldHRpbmcuYWRkU2xpZGVyKHNsaWRlciA9PiB7XG5cdFx0XHRzbGlkZXJcblx0XHRcdFx0LnNldExpbWl0cygxMDAsIDgwMDAsIDEwMClcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVtYmVkSGVpZ2h0IHx8IDQwMDApXG5cdFx0XHRcdC5zZXREeW5hbWljVG9vbHRpcCgpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbWJlZEhlaWdodCA9IHZhbHVlO1xuXHRcdFx0XHRcdGN1cnJlbnRFbWJlZEhlaWdodC50ZXh0Q29udGVudCA9IGBDdXJyZW50IGhlaWdodDogJHt2YWx1ZX1weGA7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gc2xpZGVyO1xuXHRcdH0pO1xuXHRcdGVtYmVkSGVpZ2h0U2V0dGluZy5hZGRFeHRyYUJ1dHRvbihidG4gPT4ge1xuXHRcdFx0YnRuLnNldEljb24oJ3Jlc2V0Jylcblx0XHRcdFx0LnNldFRvb2x0aXAoJ1Jlc2V0IHRvIGRlZmF1bHQnKVxuXHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgZGVmYXVsdFZhbHVlID0gNDAwMDtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5lbWJlZEhlaWdodCA9IGRlZmF1bHRWYWx1ZTtcblx0XHRcdFx0XHRjdXJyZW50RW1iZWRIZWlnaHQudGV4dENvbnRlbnQgPSBgQ3VycmVudCBoZWlnaHQ6ICR7ZGVmYXVsdFZhbHVlfXB4YDtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcblx0XHRcdFx0fSk7XG5cdFx0fSk7XG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnRW1iZWQgVGl0bGUnKVxuXHRcdFx0LnNldERlc2MoJ0VuYWJsZSB0aXRsZXMgaW4gZW1iZWRzJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcblx0XHRcdFx0dG9nZ2xlXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmVtYmVkVGl0bGUpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZW1iZWRUaXRsZSA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHQvLyBNb2JpbGUgU2V0dGluZ3Ncblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdzZXR0aW5nLWl0ZW0gc2V0dGluZy1pdGVtLWhlYWRpbmcnIH0pLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ3NldHRpbmctaXRlbS1pbmZvJyB9KS5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnTW9iaWxlIENvbnRyb2xzJywgY2xzOiAnc2V0dGluZy1pdGVtLW5hbWUnIH0pO1xuXHRcdC8vIE1vYmlsZSBUb29sYmFyXG5cdFx0Y29uc3QgbW9iaWxlVG9vbGJhclNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdNb2JpbGUgVG9vbGJhciBIZWlnaHQnKVxuXHRcdFx0LnNldERlc2MoJ1NldCB0aGUgbWF4aW11bSBudW1iZXIgb2Ygcm93cyBvZiB0b29scyB0byBzaG93IGZvciB0aGUgbW9iaWxlIHRvb2xiYXInKTtcblxuXHRcdGNvbnN0IGN1cnJlbnRNb2JpbGVUb29sYmFySGVpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0Y3VycmVudE1vYmlsZVRvb2xiYXJIZWlnaHQudGV4dENvbnRlbnQgPSBgQ3VycmVudCBoZWlnaHQ6ICR7dGhpcy5wbHVnaW4uc2V0dGluZ3MubW9iaWxlVG9vbGJhcmhlaWdodCB8fCAyfSByb3dzYDtcblx0XHRtb2JpbGVUb29sYmFyU2V0dGluZy5kZXNjRWwuYXBwZW5kQ2hpbGQoY3VycmVudE1vYmlsZVRvb2xiYXJIZWlnaHQpO1xuXG5cdFx0bW9iaWxlVG9vbGJhclNldHRpbmcuYWRkU2xpZGVyKHNsaWRlciA9PiB7XG5cdFx0XHRzbGlkZXJcblx0XHRcdFx0LnNldExpbWl0cygxLCA0LCAxKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubW9iaWxlVG9vbGJhcmhlaWdodCB8fCAyKVxuXHRcdFx0XHQuc2V0RHluYW1pY1Rvb2x0aXAoKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubW9iaWxlVG9vbGJhcmhlaWdodCA9IHZhbHVlO1xuXHRcdFx0XHRcdGN1cnJlbnRNb2JpbGVUb29sYmFySGVpZ2h0LnRleHRDb250ZW50ID0gYEN1cnJlbnQgaGVpZ2h0OiAke3ZhbHVlfSByb3dzYDtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiBzbGlkZXI7XG5cdFx0fSk7XG5cblx0XHRtb2JpbGVUb29sYmFyU2V0dGluZy5hZGRFeHRyYUJ1dHRvbihidG4gPT4ge1xuXHRcdFx0YnRuLnNldEljb24oJ3Jlc2V0Jylcblx0XHRcdFx0LnNldFRvb2x0aXAoJ1Jlc2V0IHRvIGRlZmF1bHQnKVxuXHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0Y29uc3QgZGVmYXVsdFZhbHVlID0gMjtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5tb2JpbGVUb29sYmFyaGVpZ2h0ID0gZGVmYXVsdFZhbHVlO1xuXHRcdFx0XHRcdGN1cnJlbnRNb2JpbGVUb29sYmFySGVpZ2h0LnRleHRDb250ZW50ID0gYEN1cnJlbnQgaGVpZ2h0OiAke2RlZmF1bHRWYWx1ZX0gcm93c2A7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XG5cdFx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdC8vIFRhZ3Ncblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdUYWcgSW50ZXJhY3Rpb24nKVxuXHRcdFx0LnNldERlc2MoJ0Rpc2FibGUgdGFnIHNlYXJjaCB3aGVuIGNsaWNraW5nIG9uIGEgdGFnJylcblx0XHRcdC5hZGRUb2dnbGUodG9nZ2xlID0+IHtcblx0XHRcdFx0dG9nZ2xlXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnRhZ0ludGVyYWN0aW9uKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnRhZ0ludGVyYWN0aW9uID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdC8vIE1vYmlsZSBub3RpZmljYXRpb24gYmFyIGNvbG9yXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnU3lzdGVtIFN0YXR1cyBCYXIgQWNjZW50Jylcblx0XHRcdC5zZXREZXNjKCdFbmFibGUgYWNjZW50ZWQgc3lzdGVtIHN0YXR1cyBiYXInKVxuXHRcdFx0LmFkZFRvZ2dsZSh0b2dnbGUgPT4ge1xuXHRcdFx0XHR0b2dnbGVcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubW9iaWxlU3RhdHVzYmFyKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLm1vYmlsZVN0YXR1c2JhciA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblx0XHQvLyBHbG9iYWwgcmVzZXQgYnV0dG9uXG5cdFx0Y29uc3QgcmVzZXRTZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnUmVzZXQgU2V0dGluZ3MnKVxuXHRcdFx0LnNldERlc2MoJ1Jlc2V0IGFsbCBzZXR0aW5ncyBhbmQgZW5hYmxlIHRoZSBcIkNsb2Jib3B1c1wiIHByZXNldCcpXG5cdFx0XHQuYWRkQnV0dG9uKGJ1dHRvbiA9PlxuXHRcdFx0XHRidXR0b24uc2V0QnV0dG9uVGV4dCgnUmVzZXQnKVxuXHRcdFx0XHRcdC5zZXRDdGEoKVxuXHRcdFx0XHRcdC5vbkNsaWNrKGFzeW5jICgpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzID0ge1xuXHRcdFx0XHRcdFx0XHQuLi5ERUZBVUxUX1NFVFRJTkdTLFxuXHRcdFx0XHRcdFx0XHRwcmVzZXRPdmVycmlkZTogJ0Nsb2Jib3B1cydcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1NldHRpbmdzIHJlc2V0IGFuZCBcIkNsb2Jib3B1c1wiIHByZXNldCBhcHBsaWVkIScpO1xuXHRcdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7IC8vIFJlZnJlc2ggc2V0dGluZ3MgVUlcblx0XHRcdFx0XHR9KVxuXHRcdFx0KTtcblx0XHRyZXNldFNldHRpbmcuc2V0dGluZ0Vs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
